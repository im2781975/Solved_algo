//Rewrite BFS in C++ but this time use an adjacency matrix as graph representation instead of adjacency list. 
#include <iostream>
#include <queue>

using namespace std;

const int MAX_NODES = 100; // Define the maximum number of nodes

int graph[MAX_NODES][MAX_NODES]; // Adjacency matrix
bool visited[MAX_NODES]; // Array to keep track of visited nodes

void bfs(int start, int n) {
    queue<int> q;
    q.push(start);
    visited[start] = true;

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " "; // Process the current node

        for (int i = 0; i < n; ++i) {
            if (graph[current][i] && !visited[i]) {
                q.push(i);
                visited[i] = true;
            }
        }
    }
}

int main() {
    int n, m; // Number of nodes and edges
    cout << "Enter the number of nodes and edges: ";
    cin >> n >> m;

    // Initialize the adjacency matrix and visited array
    for (int i = 0; i < n; ++i) {
        visited[i] = false;
        for (int j = 0; j < n; ++j) {
            graph[i][j] = 0;
        }
    }

    cout << "Enter the edges (node1 node2):" << endl;
    for (int i = 0; i < m; ++i) {
        int node1, node2;
        cin >> node1 >> node2;
        graph[node1][node2] = 1;
        graph[node2][node1] = 1; // For an undirected graph
    }

    int start_node;
    cout << "Enter the starting node: ";
    cin >> start_node;

    cout << "BFS starting from node " << start_node << ": ";
    bfs(start_node, n);

    return 0;
}

