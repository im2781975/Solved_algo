#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> ans;
int n;

bool solution_found(int id, vector<int> state) {
    if (id == n) {
        return true;
    }
    return false;
}

vector<int> get_candidate(vector<int> state) {
    map<int, int> taken;
    for (auto x : state) {
        taken[x] = 1;
    }
    vector<int> candidates;
    for (int i = 1; i <= n; i++) {
        if (taken.count(i) == 0) {
            candidates.push_back(i);
        }
    }
    return candidates;
}

void backtrack(int id, vector<int> state) {
    if (solution_found(id, state)) {
        ans.push_back(state);
        return;
    }
    vector<int> candidates = get_candidate(state);
    for (auto candidate : candidates) {
        state[id] = candidate;
        backtrack(id + 1, state);
        state[id] = 0;
    }
}

int main() {
    cin >> n;
    vector<int> initial_state(n);
    backtrack(0, initial_state);
    for (vector<int> permutation : ans) {
        for (int x : permutation) {
            cout << x << " "; // Print the actual permutation elements, not just spaces
        }
        cout << "\n";
    }
}

