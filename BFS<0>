//During graph traversal we saw that there were two steps. One is selecting a graph and the other is exploring the graph. During exploration of a node all its adjacent nodes are “checked” and the already visited nodes are ignored.

Now we want to calculate how many times a particular node gets “checked”. Modify the existing BFS algorithm using c++ to calculate how many times each of the nodes get “checked”.
#include <iostream>
#include <queue>
#include <map> // or <unordered_map>

using namespace std;

// Define a structure to represent a graph
struct Graph {
    int V; // Number of vertices
    map<int, vector<int>> adj; // Adjacency list
};

// Function to add an edge to the graph
void addEdge(Graph &graph, int v, int w) {
    graph.adj[v].push_back(w);
}

// Function to perform BFS and calculate the number of times each node is checked
void BFSWithVisitCount(Graph &graph, int startNode) {
    map<int, int> visitCount; // Map to store the visit count for each node
    queue<int> q; // Queue for BFS traversal

    // Initialize visit count for all nodes to 0
    for (const auto& pair : graph.adj) {
        visitCount[pair.first] = 0;
    }

    // Mark the starting node as visited and enqueue it
    q.push(startNode);

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        // Increment the visit count for the current node
        visitCount[node]++;

        // Explore all adjacent nodes of the current node
        for (int neighbor : graph.adj[node]) {
            if (visitCount[neighbor] == 0) {
                // Mark the neighbor as visited and enqueue it
                q.push(neighbor);
            }
        }
    }

    // Print the visit count for each node
    for (const auto& pair : visitCount) {
        cout << "Node " << pair.first << " was checked " << pair.second << " times." << endl;
    }
}

int main() {
    Graph graph;
    graph.V = 6; // Number of vertices

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);

    int startNode = 0; // Starting node for BFS traversal

    BFSWithVisitCount(graph, startNode);

    return 0;
}

