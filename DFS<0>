//During graph traversal we saw that there were two steps. One is selecting a graph and the other is exploring the graph. During exploration of a node all its adjacent nodes are “checked” and the already visited nodes are ignored.

Now we want to calculate how many times a particular node gets “checked”. Modify the existing DFS algorithm using c++ to calculate how many times each of the nodes get “checked”.
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
public:
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

    Graph(int vertices) : V(vertices) {
        adj.resize(V);
    }

    // Function to add an edge to the graph
    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }

    // Modified DFS to count how many times each node gets "checked"
    void modifiedDFS(int start) {
        vector<bool> visited(V, false);
        vector<int> checkCount(V, 0);
        stack<int> stack;

        stack.push(start);

        while (!stack.empty()) {
            int node = stack.top();
            stack.pop();

            if (!visited[node]) {
                visited[node] = true;
                cout << "Node " << node << " checked " << checkCount[node] << " times." << endl;

                for (int neighbor : adj[node]) {
                    if (!visited[neighbor]) {
                        stack.push(neighbor);
                        checkCount[neighbor]++;
                    }
                }
            }
        }
    }
};

int main() {
    // Create a graph with 5 vertices
    Graph g(5);

    // Add edges to the graph
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(2, 3);
    g.addEdge(3, 4);

    // Start DFS from node 0
    g.modifiedDFS(0);

    return 0;
}

