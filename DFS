//Rewrite DFS in C++ but this time use an adjacency matrix as graph representation instead of adjacency list
#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
private:
    int vertices;
    vector<vector<int>> adjacencyMatrix;

public:
    Graph(int v) : vertices(v) {
        adjacencyMatrix.resize(vertices, vector<int>(vertices, 0));
    }

    void addEdge(int from, int to) {
        adjacencyMatrix[from][to] = 1;
        adjacencyMatrix[to][from] = 1;
    }

    void DFS(int startVertex) {
        vector<bool> visited(vertices, false);
        stack<int> stack;

        visited[startVertex] = true;
        stack.push(startVertex);

        while (!stack.empty()) {
            int currentVertex = stack.top();
            stack.pop();
            cout << currentVertex << " ";

            for (int i = 0; i < vertices; i++) {
                if (adjacencyMatrix[currentVertex][i] == 1 && !visited[i]) {
                    visited[i] = true;
                    stack.push(i);
                }
            }
        }
    }
};

int main() {
    int vertices = 6;
    Graph graph(vertices);

    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(1, 4);
    graph.addEdge(2, 4);
    graph.addEdge(3, 5);

    cout << "Depth-First Traversal starting from vertex 0: ";
    graph.DFS(0);

    return 0;
}

