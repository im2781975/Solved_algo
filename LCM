//find long common subsequence.
#include<bits/stdc++.h>
using namespace std;
const int N=3e3;
int dp[N][N];
int m,n;
string s,t;

int LCS(int i,int j)
{
    if(i==m || j==n) // Changed 'j==m' to 'j==n'
        return 0;

    if(dp[i][j]!=-1)
    {
        return dp[i][j];
    }
    if(s[i]==t[j]) // Changed 's[m]' to 's[i]' and 't[n]' to 't[j]'
    {
        int ans=1+LCS(i+1,j+1);
        dp[i][j]=ans;
        return ans;
    }
    int ans=max(LCS(i+1,j),LCS(i,j+1));
    dp[i][j]=ans;
    return ans;
}

int main()
{
    cin>>s>>t;

    m=s.size();
    n=t.size();
    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            dp[i][j]=-1;
        }
    }
    cout<<LCS(0,0);
}

